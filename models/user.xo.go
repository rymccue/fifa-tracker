// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// User represents a row from 'public.users'.
type User struct {
	ID        int            `json:"id"`         // id
	Email     string         `json:"email"`      // email
	Password  string         `json:"password"`   // password
	Bio       sql.NullString `json:"bio"`        // bio
	Salt      string         `json:"salt"`       // salt
	FirstName string         `json:"first_name"` // first_name
	LastName  string         `json:"last_name"`  // last_name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the User exists in the database.
func (u *User) Exists() bool {
	return u._exists
}

// Deleted provides information if the User has been deleted from the database.
func (u *User) Deleted() bool {
	return u._deleted
}

// Insert inserts the User to the database.
func (u *User) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.users (` +
		`email, password, bio, salt, first_name, last_name` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, u.Email, u.Password, u.Bio, u.Salt, u.FirstName, u.LastName)
	err = db.QueryRow(sqlstr, u.Email, u.Password, u.Bio, u.Salt, u.FirstName, u.LastName).Scan(&u.ID)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Update updates the User in the database.
func (u *User) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if u._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.users SET (` +
		`email, password, bio, salt, first_name, last_name` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, u.Email, u.Password, u.Bio, u.Salt, u.FirstName, u.LastName, u.ID)
	_, err = db.Exec(sqlstr, u.Email, u.Password, u.Bio, u.Salt, u.FirstName, u.LastName, u.ID)
	return err
}

// Save saves the User to the database.
func (u *User) Save(db XODB) error {
	if u.Exists() {
		return u.Update(db)
	}

	return u.Insert(db)
}

// Upsert performs an upsert for User.
//
// NOTE: PostgreSQL 9.5+ only
func (u *User) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if u._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.users (` +
		`id, email, password, bio, salt, first_name, last_name` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, email, password, bio, salt, first_name, last_name` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.email, EXCLUDED.password, EXCLUDED.bio, EXCLUDED.salt, EXCLUDED.first_name, EXCLUDED.last_name` +
		`)`

	// run query
	XOLog(sqlstr, u.ID, u.Email, u.Password, u.Bio, u.Salt, u.FirstName, u.LastName)
	_, err = db.Exec(sqlstr, u.ID, u.Email, u.Password, u.Bio, u.Salt, u.FirstName, u.LastName)
	if err != nil {
		return err
	}

	// set existence
	u._exists = true

	return nil
}

// Delete deletes the User from the database.
func (u *User) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !u._exists {
		return nil
	}

	// if deleted, bail
	if u._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.users WHERE id = $1`

	// run query
	XOLog(sqlstr, u.ID)
	_, err = db.Exec(sqlstr, u.ID)
	if err != nil {
		return err
	}

	// set deleted
	u._deleted = true

	return nil
}

// GetAllUsers returns paginated most recent rows from 'public.users',
// ordered by "created_at" in descending order.
func GetAllUsers(db XODB, page, resultsPerPage int) ([]*User, error) {
	startIndex := (page - 1) * resultsPerPage
	const sqlstr = `SELECT ` +
		`id, email, password, bio, salt, first_name, last_name ` +
		`FROM public.users ` +
		`ORDER BY created_at DESC LIMIT $1 OFFSET $2`

	q, err := db.Query(sqlstr, resultsPerPage, startIndex)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Email, &u.Password, &u.Bio, &u.Salt, &u.FirstName, &u.LastName)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// GetMostRecentUsers returns n most recent rows from 'public.users',
// ordered by "created_at" in descending order.
func GetMostRecentUsers(db XODB, n int) ([]*User, error) {
	const sqlstr = `SELECT ` +
		`id, email, password, bio, salt, first_name, last_name ` +
		`FROM public.users ` +
		`ORDER BY created_at DESC LIMIT $1`

	q, err := db.Query(sqlstr, n)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	var res []*User
	for q.Next() {
		u := User{}

		// scan
		err = q.Scan(&u.ID, &u.Email, &u.Password, &u.Bio, &u.Salt, &u.FirstName, &u.LastName)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UsersByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'user_email_idx'.
func UsersByEmail(db XODB, email string) ([]*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, password, bio, salt, first_name, last_name ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	q, err := db.Query(sqlstr, email)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*User{}
	for q.Next() {
		u := User{
			_exists: true,
		}

		// scan
		err = q.Scan(&u.ID, &u.Email, &u.Password, &u.Bio, &u.Salt, &u.FirstName, &u.LastName)
		if err != nil {
			return nil, err
		}

		res = append(res, &u)
	}

	return res, nil
}

// UserByEmail retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_email_key'.
func UserByEmail(db XODB, email string) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, password, bio, salt, first_name, last_name ` +
		`FROM public.users ` +
		`WHERE email = $1`

	// run query
	XOLog(sqlstr, email)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, email).Scan(&u.ID, &u.Email, &u.Password, &u.Bio, &u.Salt, &u.FirstName, &u.LastName)
	if err != nil {
		return nil, err
	}

	return &u, nil
}

// UserByID retrieves a row from 'public.users' as a User.
//
// Generated from index 'users_pkey'.
func UserByID(db XODB, id int) (*User, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, email, password, bio, salt, first_name, last_name ` +
		`FROM public.users ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	u := User{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&u.ID, &u.Email, &u.Password, &u.Bio, &u.Salt, &u.FirstName, &u.LastName)
	if err != nil {
		return nil, err
	}

	return &u, nil
}
