// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "FIFA Tracker": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/rymccue/fifa-tracker/design
// --out=$(GOPATH)/src/github.com/rymccue/fifa-tracker
// --version=v1.2.0-dirty

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
	"strconv"
)

// DeleteAccountContext provides the account delete action context.
type DeleteAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AccountID int
}

// NewDeleteAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller delete action.
func NewDeleteAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAccountID := req.Params["accountID"]
	if len(paramAccountID) > 0 {
		rawAccountID := paramAccountID[0]
		if accountID, err2 := strconv.Atoi(rawAccountID); err2 == nil {
			rctx.AccountID = accountID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("accountID", rawAccountID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteAccountContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteAccountContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteAccountContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteAccountContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteAccountContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListAccountContext provides the account list action context.
type ListAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller list action.
func NewListAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListAccountContext) OK(r FtAccountCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.account+json; type=collection")
	if r == nil {
		r = FtAccountCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListAccountContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListAccountContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ShowAccountContext provides the account show action context.
type ShowAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AccountID int
}

// NewShowAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller show action.
func NewShowAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAccountID := req.Params["accountID"]
	if len(paramAccountID) > 0 {
		rawAccountID := paramAccountID[0]
		if accountID, err2 := strconv.Atoi(rawAccountID); err2 == nil {
			rctx.AccountID = accountID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("accountID", rawAccountID, "integer"))
		}
		if rctx.AccountID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`accountID`, rctx.AccountID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowAccountContext) OK(r *FtAccount) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowAccountContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowAccountContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// UpdateAccountContext provides the account update action context.
type UpdateAccountContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	AccountID int
	Payload   *UpdateAccountPayload
}

// NewUpdateAccountContext parses the incoming request URL and body, performs validations and creates the
// context used by the account controller update action.
func NewUpdateAccountContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateAccountContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateAccountContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramAccountID := req.Params["accountID"]
	if len(paramAccountID) > 0 {
		rawAccountID := paramAccountID[0]
		if accountID, err2 := strconv.Atoi(rawAccountID); err2 == nil {
			rctx.AccountID = accountID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("accountID", rawAccountID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateAccountContext) OK(r *FtAccount) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.account+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateAccountContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateAccountContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateAccountContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateAccountContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// LoginAuthenticationContext provides the authentication login action context.
type LoginAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *LoginPayload
}

// NewLoginAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller login action.
func NewLoginAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*LoginAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := LoginAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *LoginAuthenticationContext) OK(r *FtToken) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.token+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *LoginAuthenticationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *LoginAuthenticationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// RegisterAuthenticationContext provides the authentication register action context.
type RegisterAuthenticationContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AccountPayload
}

// NewRegisterAuthenticationContext parses the incoming request URL and body, performs validations and creates the
// context used by the authentication controller register action.
func NewRegisterAuthenticationContext(ctx context.Context, r *http.Request, service *goa.Service) (*RegisterAuthenticationContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := RegisterAuthenticationContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *RegisterAuthenticationContext) OK(r *FtToken) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.token+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// NoContent sends a HTTP response with status code 204.
func (ctx *RegisterAuthenticationContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *RegisterAuthenticationContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *RegisterAuthenticationContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// CreateMatchContext provides the match create action context.
type CreateMatchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MatchID *int
	Payload *MatchPayload
}

// NewCreateMatchContext parses the incoming request URL and body, performs validations and creates the
// context used by the match controller create action.
func NewCreateMatchContext(ctx context.Context, r *http.Request, service *goa.Service) (*CreateMatchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := CreateMatchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMatchID := req.Params["matchID"]
	if len(paramMatchID) > 0 {
		rawMatchID := paramMatchID[0]
		if matchID, err2 := strconv.Atoi(rawMatchID); err2 == nil {
			tmp5 := matchID
			tmp4 := &tmp5
			rctx.MatchID = tmp4
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("matchID", rawMatchID, "integer"))
		}
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *CreateMatchContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *CreateMatchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *CreateMatchContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *CreateMatchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *CreateMatchContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// DeleteMatchContext provides the match delete action context.
type DeleteMatchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MatchID int
}

// NewDeleteMatchContext parses the incoming request URL and body, performs validations and creates the
// context used by the match controller delete action.
func NewDeleteMatchContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteMatchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteMatchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMatchID := req.Params["matchID"]
	if len(paramMatchID) > 0 {
		rawMatchID := paramMatchID[0]
		if matchID, err2 := strconv.Atoi(rawMatchID); err2 == nil {
			rctx.MatchID = matchID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("matchID", rawMatchID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteMatchContext) OK(r *FtMatch) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.match+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *DeleteMatchContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteMatchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteMatchContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// ListMatchContext provides the match list action context.
type ListMatchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListMatchContext parses the incoming request URL and body, performs validations and creates the
// context used by the match controller list action.
func NewListMatchContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListMatchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListMatchContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListMatchContext) OK(r FtMatchCollection) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.match+json; type=collection")
	if r == nil {
		r = FtMatchCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ListMatchContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// ShowMatchContext provides the match show action context.
type ShowMatchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MatchID int
}

// NewShowMatchContext parses the incoming request URL and body, performs validations and creates the
// context used by the match controller show action.
func NewShowMatchContext(ctx context.Context, r *http.Request, service *goa.Service) (*ShowMatchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ShowMatchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMatchID := req.Params["matchID"]
	if len(paramMatchID) > 0 {
		rawMatchID := paramMatchID[0]
		if matchID, err2 := strconv.Atoi(rawMatchID); err2 == nil {
			rctx.MatchID = matchID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("matchID", rawMatchID, "integer"))
		}
		if rctx.MatchID < 1 {
			err = goa.MergeErrors(err, goa.InvalidRangeError(`matchID`, rctx.MatchID, 1, true))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ShowMatchContext) OK(r *FtMatch) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.match+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *ShowMatchContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *ShowMatchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ShowMatchContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}

// UpdateMatchContext provides the match update action context.
type UpdateMatchContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	MatchID int
	Payload *UpdateMatchPayload
}

// NewUpdateMatchContext parses the incoming request URL and body, performs validations and creates the
// context used by the match controller update action.
func NewUpdateMatchContext(ctx context.Context, r *http.Request, service *goa.Service) (*UpdateMatchContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := UpdateMatchContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramMatchID := req.Params["matchID"]
	if len(paramMatchID) > 0 {
		rawMatchID := paramMatchID[0]
		if matchID, err2 := strconv.Atoi(rawMatchID); err2 == nil {
			rctx.MatchID = matchID
		} else {
			err = goa.MergeErrors(err, goa.InvalidParamTypeError("matchID", rawMatchID, "integer"))
		}
	}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *UpdateMatchContext) OK(r *FtMatch) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/ft.match+json")
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *UpdateMatchContext) BadRequest(r error) error {
	ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// Unauthorized sends a HTTP response with status code 401.
func (ctx *UpdateMatchContext) Unauthorized() error {
	ctx.ResponseData.WriteHeader(401)
	return nil
}

// NotFound sends a HTTP response with status code 404.
func (ctx *UpdateMatchContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *UpdateMatchContext) InternalServerError() error {
	ctx.ResponseData.WriteHeader(500)
	return nil
}
