// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "FIFA Tracker": match Resource Client
//
// Command:
// $ goagen
// --design=github.com/rymccue/fifa-tracker/design
// --out=$(GOPATH)/src/github.com/rymccue/fifa-tracker
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// CreateMatchPath computes a request path to the create action of match.
func CreateMatchPath() string {

	return fmt.Sprintf("/match/create")
}

// Create new match
func (c *Client) CreateMatch(ctx context.Context, path string, payload *MatchPayload, matchID *int) (*http.Response, error) {
	req, err := c.NewCreateMatchRequest(ctx, path, payload, matchID)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateMatchRequest create the request corresponding to the create action endpoint of the match resource.
func (c *Client) NewCreateMatchRequest(ctx context.Context, path string, payload *MatchPayload, matchID *int) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	if matchID != nil {
		tmp12 := strconv.Itoa(*matchID)
		values.Set("matchID", tmp12)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// DeleteMatchPath computes a request path to the delete action of match.
func DeleteMatchPath(matchID int) string {
	param0 := strconv.Itoa(matchID)

	return fmt.Sprintf("/match/%s", param0)
}

// Delete a match
func (c *Client) DeleteMatch(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteMatchRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteMatchRequest create the request corresponding to the delete action endpoint of the match resource.
func (c *Client) NewDeleteMatchRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListMatchPath computes a request path to the list action of match.
func ListMatchPath() string {

	return fmt.Sprintf("/match")
}

// Retrieve all matches
func (c *Client) ListMatch(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListMatchRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListMatchRequest create the request corresponding to the list action endpoint of the match resource.
func (c *Client) NewListMatchRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowMatchPath computes a request path to the show action of match.
func ShowMatchPath(matchID int) string {
	param0 := strconv.Itoa(matchID)

	return fmt.Sprintf("/match/%s", param0)
}

// Retrieve a match with a given id
func (c *Client) ShowMatch(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowMatchRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowMatchRequest create the request corresponding to the show action endpoint of the match resource.
func (c *Client) NewShowMatchRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateMatchPath computes a request path to the update action of match.
func UpdateMatchPath(matchID int) string {
	param0 := strconv.Itoa(matchID)

	return fmt.Sprintf("/match/%s", param0)
}

// Change match data
func (c *Client) UpdateMatch(ctx context.Context, path string, payload *UpdateMatchPayload) (*http.Response, error) {
	req, err := c.NewUpdateMatchRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateMatchRequest create the request corresponding to the update action endpoint of the match resource.
func (c *Client) NewUpdateMatchRequest(ctx context.Context, path string, payload *UpdateMatchPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
