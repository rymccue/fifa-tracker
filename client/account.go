// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "FIFA Tracker": account Resource Client
//
// Command:
// $ goagen
// --design=github.com/rymccue/fifa-tracker/design
// --out=$(GOPATH)/src/github.com/rymccue/fifa-tracker
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

// DeleteAccountPath computes a request path to the delete action of account.
func DeleteAccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/account/%s", param0)
}

// DeleteAccount makes a request to the delete action endpoint of the account resource
func (c *Client) DeleteAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteAccountRequest create the request corresponding to the delete action endpoint of the account resource.
func (c *Client) NewDeleteAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ListAccountPath computes a request path to the list action of account.
func ListAccountPath() string {

	return fmt.Sprintf("/account")
}

// Retrieve all users
func (c *Client) ListAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewListAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListAccountRequest create the request corresponding to the list action endpoint of the account resource.
func (c *Client) NewListAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// ShowAccountPath computes a request path to the show action of account.
func ShowAccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/account/%s", param0)
}

// Retrieve a user with a given id
func (c *Client) ShowAccount(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowAccountRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowAccountRequest create the request corresponding to the show action endpoint of the account resource.
func (c *Client) NewShowAccountRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}

// UpdateAccountPath computes a request path to the update action of account.
func UpdateAccountPath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/account/%s", param0)
}

// Change user data
func (c *Client) UpdateAccount(ctx context.Context, path string, payload *UpdateAccountPayload) (*http.Response, error) {
	req, err := c.NewUpdateAccountRequest(ctx, path, payload)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateAccountRequest create the request corresponding to the update action endpoint of the account resource.
func (c *Client) NewUpdateAccountRequest(ctx context.Context, path string, payload *UpdateAccountPayload) (*http.Request, error) {
	var body bytes.Buffer
	err := c.Encoder.Encode(payload, &body, "*/*")
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	header.Set("Content-Type", "application/json")
	if c.JWTSigner != nil {
		c.JWTSigner.Sign(req)
	}
	return req, nil
}
